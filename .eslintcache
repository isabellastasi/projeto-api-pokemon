[{"C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\index.js":"1","C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\App.js":"2","C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\components\\Unificado.js":"3"},{"size":177,"mtime":1612027459577,"results":"4","hashOfConfig":"5"},{"size":344,"mtime":1612113066386,"results":"6","hashOfConfig":"5"},{"size":8411,"mtime":1612137190708,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"14kn8qw",{"filePath":"11","messages":"12","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13","usedDeprecatedRules":"10"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"16"},"C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\index.js",[],["17","18"],"C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\App.js",["19"],"\nimport React, { Component } from 'react';\nimport Unificado from \"./components/Unificado.js\"\n//import Pokemon from \"./components/Pokemo_copy.js\"\nimport './App.css'\n\n\nclass App extends React.Component {\n  render() {\n    return (\n      <div className =\"App\">\n        \n      <Unificado ></Unificado>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","C:\\Users\\isa_b\\Desktop\\projeto-EBB\\projeto-api\\src\\components\\Unificado.js",["20","21","22","23","24","25","26","27","28"],"import React, { Component } from 'react';\r\nimport Rain from './imagens/Rainw.png'\r\nimport Snow from './imagens/Snoww.png'\r\nimport Clouds from './imagens/Cloudsw.png'\r\nimport Clear from './imagens/Clearw.png'\r\nimport Haze from './imagens/Hazew.png'\r\nimport Fog from './imagens/Fogw.png'\r\nimport Mist from './imagens/Mistw.png'\r\nimport Pokemon from './imagens/pokemon-logo.png'\r\nimport './Unificado.css'\r\n\r\n\r\nexport default class Conversor extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        super(props);\r\n\r\n        this.state = {\r\n            city: \"\",\r\n            tempInCelsius: \"\",\r\n            weatherType: \"\",\r\n            pokemon: \"\",\r\n            pokemonType: \"\",\r\n            image: \"\",\r\n            sprites: \"\"\r\n\r\n        }\r\n        this.weatherForecast = this.weatherForecast.bind(this)\r\n        this.buscaPokemon = this.buscaPokemon.bind(this)\r\n        this.image = this.image.bind(this)\r\n        this.checkTemperature = this.checkTemperature.bind(this)\r\n    }\r\n\r\n\r\n    weatherForecast() {\r\n        let key = '71d469ad633462a165133b9c0d63b59f';\r\n        let city = (this.state.city).replace(\" \", \"+\")\r\n        let url = `http://api.openweathermap.org/data/2.5/weather?q=${city}&APPID=${key}`\r\n        let cityName\r\n        let tempInCelsius\r\n        let weatherType\r\n\r\n        fetch(url)\r\n            .then((data) => {\r\n                return data.json();\r\n            })\r\n            .then((data) => {\r\n                tempInCelsius = (data.main.temp - 273.15).toFixed(1);\r\n               weatherType = (data.weather[0].main)\r\n\r\n                cityName = (this.state.city)\r\n                this.setState({ cityName })\r\n                this.setState({weatherType })\r\n                this.setState({ tempInCelsius })\r\n\r\n                console.log(this.state)\r\n                console.log(parseFloat(this.state.tempInCelsius))\r\n                console.log(this.state.weatherType)\r\n                this.checkTemperature(parseFloat(this.state.tempInCelsius))\r\n                this.imagens(this.state.weatherType)\r\n                this.exibir()\r\n            })\r\n\r\n            .catch((err) => {\r\n                cityName = `city não identificada. Tente novamente.`\r\n                tempInCelsius = '-'\r\n                weatherType = '-'\r\n                let image = \"\"\r\n                let pokemon = '-'\r\n                let type = '-'\r\n                let sprites = '-'\r\n\r\n                this.state.pokemon = pokemon;\r\n                this.state.pokemonType = type;\r\n                this.state.sprites = sprites;\r\n\r\n\r\n                this.state.image = image;\r\n\r\n                this.setState({ cityName })\r\n                this.setState({ tempInCelsius })\r\n                this.setState({weatherType })\r\n                this.setState({ image })\r\n\r\n                console.log(this.state)\r\n                this.exibir()\r\n            })\r\n\r\n\r\n    }\r\n\r\n    buscaPokemon(pokemonType) {\r\n\r\n        let url = `https://pokeapi.co/api/v2/type/${pokemonType}`\r\n\r\n        fetch(url)\r\n            .then((data) => {\r\n                return data.json();\r\n            })\r\n            .then((data) => {\r\n                let tamanhoArray = (data.pokemon).length;\r\n                let i = (Math.random() * ((tamanhoArray - 1) - 0)).toFixed()\r\n\r\n                let pokemon = data.pokemon[i].pokemon.name\r\n                let urlpokemon = data.pokemon[i].pokemon.url\r\n                this.setState({ pokemon })\r\n                this.setState({ urlpokemon })\r\n                console.log(this.state)\r\n                this.image()\r\n            })\r\n\r\n\r\n    }\r\n    image() {\r\n\r\n        let url = this.state.urlpokemon\r\n        console.log(url)\r\n        console.log(this.state)\r\n\r\n        let imageNull = document.querySelector('.imageNull');\r\n\r\n        fetch(url)\r\n            .then((data) => {\r\n                return data.json();\r\n            })\r\n            .then((data) => {\r\n\r\n                let sprites = data.sprites.other.[\"official-artwork\"].front_default\r\n                this.setState({ sprites })\r\n\r\n                document.getElementById(\"imagePokemon\").style.display = 'block';\r\n                imageNull.style.display = 'none'\r\n                if (this.state.sprites === null) {\r\n                    document.getElementById(\"imagePokemon\").style.display = 'none';\r\n                    imageNull.style.display = 'block'\r\n                    imageNull.innerText = `image não disponível`;\r\n                }\r\n                console.log(this.state)\r\n\r\n            })\r\n\r\n    }\r\n\r\n    checkTemperature(temperature) {\r\n\r\n        let pokemonType = \"\";\r\n\r\n        if (this.state.weatherType === \"Rain\") {\r\n            pokemonType = \"electric\";\r\n        }\r\n        else if (temperature < 5) {\r\n\r\n            pokemonType = \"ice\";\r\n        }\r\n        else if (temperature >= 5 && temperature < 10) {\r\n            pokemonType = \"water\";\r\n        }\r\n        else if (temperature >= 12 && temperature < 15) {\r\n            pokemonType = \"grass\";\r\n        }\r\n        else if (temperature >= 15 && temperature < 21) {\r\n            pokemonType = \"ground\";\r\n        }\r\n        else if (temperature >= 23 && temperature < 27) {\r\n            pokemonType = \"bug\";\r\n        }\r\n\r\n        else if (temperature >= 27 && temperature <= 33) { pokemonType = \"rock\"; }\r\n\r\n        else if (temperature > 33) {\r\n            pokemonType = \"fire\";\r\n        }\r\n        else {\r\n            pokemonType = \"normal\";\r\n        }\r\n\r\n\r\n        this.setState({ pokemonType })\r\n\r\n        console.log(this.state.pokemonType)\r\n        this.buscaPokemon(pokemonType)\r\n    }\r\n\r\n    imagens(tempo) {\r\n        let image;\r\n        console.log(tempo)\r\n        switch (tempo) {\r\n            case 'Rain':\r\n                image = Rain;\r\n                break;\r\n            case 'Clouds':\r\n                image = Clouds;\r\n                break;\r\n            case 'Clear':\r\n                image = Clear;\r\n                break;\r\n            case 'Snow':\r\n                image = Snow;\r\n                break;\r\n            case 'Haze':\r\n                image = Haze;\r\n                break;\r\n\r\n            case 'Fog':\r\n                image = Fog;\r\n                break;\r\n\r\n            case 'Mist':\r\n                image = Mist;\r\n                break;\r\n\r\n            default:\r\n\r\n                break;\r\n        }\r\n        this.setState({ image })\r\n        console.log(this.state)\r\n    }\r\n\r\n    exibir() {\r\n        document.getElementById(\"pokemonContent\").style.visibility = 'visible'\r\n        document.getElementById(\"forecastContent\").style.visibility = 'visible'\r\n    }\r\n    render() {\r\n        return (\r\n\r\n            <div id=\"conversor\">\r\n                <header>\r\n                    <div id=\"title\">\r\n                        <h1>Encontre o seu </h1>\r\n                        <img id=\"logo\" src={Pokemon}></img>\r\n                    </div>\r\n\r\n                    <div>\r\n                        <label cityName> Digite o nome da cidade: </label>\r\n                        <input id=\"cityName\" type=\"text\" onChange={(event) => { this.setState({ city: event.target.value }) }}></input>\r\n                        <input id=\"botao\" type=\"button\" value=\"Ok\" onClick={this.weatherForecast}></input>\r\n                    </div>\r\n                </header>\r\n\r\n                <div id=\"exhibition\">\r\n                    <div id=\"pokemon\">\r\n                        <div id=\"pokemonContent\">\r\n                            <div>\r\n                                <img id=\"imagePokemon\" src={this.state.sprites}></img>\r\n                                <h5 className=\"imageNull\"></h5>\r\n                            </div>\r\n                            <h4>Pokémon: {this.state.pokemon}</h4>\r\n                            <h4>Tipo: {this.state.pokemonType}</h4>\r\n                        </div>\r\n                    </div>\r\n\r\n                    <div id=\"forecast\">\r\n                        <div id=\"forecastContent\">\r\n                            <h3 id=\"city\">Cidade: {this.state.cityName}</h3>\r\n\r\n                            <h3>Temperatura: {this.state.tempInCelsius}°C</h3>\r\n                            <div id=\"status\">\r\n                                <img id=\"imageTemperature\" src={this.state.image} ></img>\r\n\r\n                                <h3>{this.state.weatherType}</h3>\r\n                            </div>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n\r\n\r\n\r\n        )\r\n\r\n    }\r\n} ",{"ruleId":"29","replacedBy":"30"},{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","severity":1,"message":"34","line":2,"column":17,"nodeType":"35","messageId":"36","endLine":2,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":1,"column":17,"nodeType":"35","messageId":"36","endLine":1,"endColumn":26},{"ruleId":"37","severity":1,"message":"38","line":74,"column":17,"nodeType":"39","endLine":74,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":75,"column":17,"nodeType":"39","endLine":75,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":76,"column":17,"nodeType":"39","endLine":76,"endColumn":27},{"ruleId":"37","severity":1,"message":"38","line":79,"column":17,"nodeType":"39","endLine":79,"endColumn":27},{"ruleId":"40","severity":1,"message":"41","line":232,"column":25,"nodeType":"42","endLine":232,"endColumn":54},{"ruleId":"40","severity":1,"message":"41","line":246,"column":33,"nodeType":"42","endLine":246,"endColumn":81},{"ruleId":"43","severity":1,"message":"44","line":247,"column":33,"nodeType":"42","endLine":247,"endColumn":59},{"ruleId":"40","severity":1,"message":"41","line":260,"column":33,"nodeType":"42","endLine":260,"endColumn":84},"no-native-reassign",["45"],"no-negated-in-lhs",["46"],"no-unused-vars","'Component' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","no-global-assign","no-unsafe-negation"]